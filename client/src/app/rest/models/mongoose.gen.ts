/* tslint:disable */
/* eslint-disable */

// ######################################## THIS FILE WAS GENERATED BY MONGOOSE-TSGEN ######################################## //

// NOTE: ANY CHANGES MADE WILL BE OVERWRITTEN ON SUBSEQUENT EXECUTIONS OF MONGOOSE-TSGEN.

import mongoose from "mongoose";

/**
 * Lean version of IngredientDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `IngredientDocument.toObject()`. To avoid conflicts with model names, use the type alias `IngredientObject`.
 * ```
 * const ingredientObject = ingredient.toObject();
 * ```
 */
export type Ingredient = {
  id?: mongoose.Types.ObjectId;
  ingredientName: {
    val:
      | "paradicsom"
      | "paprika"
      | "vöröshagyma"
      | "zöldborsó"
      | "liszt"
      | "tej"
      | "cukkini"
      | "tojás"
      | "fokhagyma"
      | "petrezselyem"
      | "sajt"
      | "zsemlemorzsa"
      | "olaj"
      | "erőspista";
    viewVal: string;
  };
  quantityTypes?: string[];
  _id: mongoose.Types.ObjectId;
  updatedAt?: Date;
  createdAt?: Date;
};

/**
 * Lean version of IngredientDocument (type alias of `Ingredient`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Ingredient } from "../models"
 * import { IngredientObject } from "../interfaces/mongoose.gen.ts"
 *
 * const ingredientObject: IngredientObject = ingredient.toObject();
 * ```
 */
export type IngredientObject = Ingredient;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type IngredientQuery = mongoose.Query<
  any,
  IngredientDocument,
  IngredientQueries
> &
  IngredientQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `IngredientSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type IngredientQueries = {};

export type IngredientMethods = {};

export type IngredientStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Ingredient = mongoose.model<IngredientDocument, IngredientModel>("Ingredient", IngredientSchema);
 * ```
 */
export type IngredientModel = mongoose.Model<
  IngredientDocument,
  IngredientQueries
> &
  IngredientStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Ingredient schema instances:
 * ```
 * const IngredientSchema: IngredientSchema = new mongoose.Schema({ ... })
 * ```
 */
export type IngredientSchema = mongoose.Schema<
  IngredientDocument,
  IngredientModel,
  IngredientMethods,
  IngredientQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Ingredient = mongoose.model<IngredientDocument, IngredientModel>("Ingredient", IngredientSchema);
 * ```
 */
export type IngredientDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  IngredientQueries
> &
  IngredientMethods & {
    id?: mongoose.Types.ObjectId;
    ingredientName: {
      val:
        | "paradicsom"
        | "paprika"
        | "vöröshagyma"
        | "zöldborsó"
        | "liszt"
        | "tej"
        | "cukkini"
        | "tojás"
        | "fokhagyma"
        | "petrezselyem"
        | "sajt"
        | "zsemlemorzsa"
        | "olaj"
        | "erőspista";
      viewVal: string;
    };
    quantityTypes?: string[];
    _id: mongoose.Types.ObjectId;
    updatedAt?: Date;
    createdAt?: Date;
  };

/**
 * Lean version of RecipeIngredientDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `RecipeDocument.toObject()`.
 * ```
 * const recipeObject = recipe.toObject();
 * ```
 */
export type RecipeIngredient = {
  quantityType?: string[];
  quantity?: number;
  ingredientName: {
    val:
      | "paradicsom"
      | "paprika"
      | "vöröshagyma"
      | "zöldborsó"
      | "liszt"
      | "tej"
      | "cukkini"
      | "tojás"
      | "fokhagyma"
      | "petrezselyem"
      | "sajt"
      | "zsemlemorzsa"
      | "olaj"
      | "erőspista";
    viewVal: string;
  };
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of RecipeDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `RecipeDocument.toObject()`. To avoid conflicts with model names, use the type alias `RecipeObject`.
 * ```
 * const recipeObject = recipe.toObject();
 * ```
 */
export type Recipe = {
  id?: mongoose.Types.ObjectId;
  title: string;
  description: string;
  ingredients: RecipeIngredient[];
  href: string;
  image: string;
  vegetarian: boolean;
  _id: mongoose.Types.ObjectId;
  updatedAt?: Date;
  createdAt?: Date;
};

/**
 * Lean version of RecipeDocument (type alias of `Recipe`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Recipe } from "../models"
 * import { RecipeObject } from "../interfaces/mongoose.gen.ts"
 *
 * const recipeObject: RecipeObject = recipe.toObject();
 * ```
 */
export type RecipeObject = Recipe;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type RecipeQuery = mongoose.Query<any, RecipeDocument, RecipeQueries> &
  RecipeQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `RecipeSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type RecipeQueries = {};

export type RecipeMethods = {};

export type RecipeStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Recipe = mongoose.model<RecipeDocument, RecipeModel>("Recipe", RecipeSchema);
 * ```
 */
export type RecipeModel = mongoose.Model<RecipeDocument, RecipeQueries> &
  RecipeStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Recipe schema instances:
 * ```
 * const RecipeSchema: RecipeSchema = new mongoose.Schema({ ... })
 * ```
 */
export type RecipeSchema = mongoose.Schema<
  RecipeDocument,
  RecipeModel,
  RecipeMethods,
  RecipeQueries
>;

/**
 * Mongoose Subdocument type
 *
 * Type of `RecipeDocument["ingredients"]` element.
 */
export type RecipeIngredientDocument = mongoose.Types.Subdocument & {
  quantityType?: string[];
  quantity?: number;
  ingredientName: {
    val:
      | "paradicsom"
      | "paprika"
      | "vöröshagyma"
      | "zöldborsó"
      | "liszt"
      | "tej"
      | "cukkini"
      | "tojás"
      | "fokhagyma"
      | "petrezselyem"
      | "sajt"
      | "zsemlemorzsa"
      | "olaj"
      | "erőspista";
    viewVal: string;
  };
  _id: mongoose.Types.ObjectId;
};

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Recipe = mongoose.model<RecipeDocument, RecipeModel>("Recipe", RecipeSchema);
 * ```
 */
export type RecipeDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  RecipeQueries
> &
  RecipeMethods & {
    id?: mongoose.Types.ObjectId;
    title: string;
    description: string;
    ingredients: mongoose.Types.DocumentArray<RecipeIngredientDocument>;
    href: string;
    image: string;
    vegetarian: boolean;
    _id: mongoose.Types.ObjectId;
    updatedAt?: Date;
    createdAt?: Date;
  };

/**
 * Check if a property on a document is populated:
 * ```
 * import { IsPopulated } from "../interfaces/mongoose.gen.ts"
 *
 * if (IsPopulated<UserDocument["bestFriend"]>) { ... }
 * ```
 */
export function IsPopulated<T>(doc: T | mongoose.Types.ObjectId): doc is T {
  return doc instanceof mongoose.Document;
}

/**
 * Helper type used by `PopulatedDocument`. Returns the parent property of a string
 * representing a nested property (i.e. `friend.user` -> `friend`)
 */
type ParentProperty<T> = T extends `${infer P}.${string}` ? P : never;

/**
 * Helper type used by `PopulatedDocument`. Returns the child property of a string
 * representing a nested property (i.e. `friend.user` -> `user`).
 */
type ChildProperty<T> = T extends `${string}.${infer C}` ? C : never;

/**
 * Helper type used by `PopulatedDocument`. Removes the `ObjectId` from the general union type generated
 * for ref documents (i.e. `mongoose.Types.ObjectId | UserDocument` -> `UserDocument`)
 */
type PopulatedProperty<Root, T extends keyof Root> = Omit<Root, T> & {
  [ref in T]: Root[T] extends mongoose.Types.Array<infer U>
    ? mongoose.Types.Array<Exclude<U, mongoose.Types.ObjectId>>
    : Exclude<Root[T], mongoose.Types.ObjectId>;
};

/**
 * Populate properties on a document type:
 * ```
 * import { PopulatedDocument } from "../interfaces/mongoose.gen.ts"
 *
 * function example(user: PopulatedDocument<UserDocument, "bestFriend">) {
 *   console.log(user.bestFriend._id) // typescript knows this is populated
 * }
 * ```
 */
export type PopulatedDocument<DocType, T> = T extends keyof DocType
  ? PopulatedProperty<DocType, T>
  : ParentProperty<T> extends keyof DocType
  ? Omit<DocType, ParentProperty<T>> & {
      [ref in ParentProperty<T>]: DocType[ParentProperty<T>] extends mongoose.Types.Array<
        infer U
      >
        ? mongoose.Types.Array<
            ChildProperty<T> extends keyof U
              ? PopulatedProperty<U, ChildProperty<T>>
              : PopulatedDocument<U, ChildProperty<T>>
          >
        : ChildProperty<T> extends keyof DocType[ParentProperty<T>]
        ? PopulatedProperty<DocType[ParentProperty<T>], ChildProperty<T>>
        : PopulatedDocument<DocType[ParentProperty<T>], ChildProperty<T>>;
    }
  : DocType;

/**
 * Helper types used by the populate overloads
 */
type Unarray<T> = T extends Array<infer U> ? U : T;
type Modify<T, R> = Omit<T, keyof R> & R;

/**
 * Augment mongoose with Query.populate overloads
 */
declare module "mongoose" {
  interface Query<ResultType, DocType, THelpers = {}> {
    populate<T extends string>(
      path: T,
      select?: string | any,
      model?: string | Model<any, THelpers>,
      match?: any
    ): Query<
      ResultType extends Array<DocType>
        ? Array<PopulatedDocument<Unarray<ResultType>, T>>
        : ResultType extends DocType
        ? PopulatedDocument<Unarray<ResultType>, T>
        : ResultType,
      DocType,
      THelpers
    > &
      THelpers;

    populate<T extends string>(
      options: Modify<PopulateOptions, { path: T }> | Array<PopulateOptions>
    ): Query<
      ResultType extends Array<DocType>
        ? Array<PopulatedDocument<Unarray<ResultType>, T>>
        : ResultType extends DocType
        ? PopulatedDocument<Unarray<ResultType>, T>
        : ResultType,
      DocType,
      THelpers
    > &
      THelpers;
  }
}
